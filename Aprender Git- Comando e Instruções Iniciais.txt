COMANDOS BÀSICOS

BAIXAR PROJETOS:
1- criar a pasta do projeto
2- Abrir o terminal
3- comando inicializar
	Código : git init
4- Clonar (baixar) o projeto do GitLab
	1-tenha o link HTTPS do projeto (ex: https://gitlab.com/empresa/projeto.git)
	2- rode o código para clonar
	Código : git clone <https://gitlab.com/empresa/projeto.git link do projeto>
		Esse comando vai baixar o projeto inteiro e criar uma pasta com o nome dele.
5- Criar uma nova branch para trabalhar
	git checkout -b minha-feature


PASSO A PASSO DENTRO DA PASTAS PARA MANDAR PARA NUVEM
1- comando inicializar
git init

2- verificar status(verificar o local onde o código está, verificando se está ou não atualizado
git status
vê um relatório
-No commits yet : sem versões novas do código
-Untracked files : aponta quais documentos não estão no controle de versão

3- Adicionar arquivos no controle de versão
1 arquivo por vez: git add "nome_completo_do_arquivo_incluido_extensão"
vários arquivos: git add .

4- Criar versões do código com o commit
git commit -m "" --( '-m'= mensagem ai se descreve o que foi feito naquela versão normalmente no primeiro git comit se descreve 'commit inicial'
Comit
	4.1 - configurar o usuário na primeira vez
		código: git config --global user.email "you@example.com" -- e-mail do github
  		código :git config --global user.name "Your Name" --Noque que vai aparecer a cada commit
5- Como enviar alterações usando git Push - envia os arquivos para nuvem
	5.1 Criar um novo repositório na conta do git hub
	5.2 colocar o endereço do local que é para o arquivo ir
		código: git remote add origin <url>
	5.2 Definir o Branch
		normalmente é sempre enviado para a master
			Código: git push --set-upstream origin master

6- Ciclo de atualização do código 
	1- verificar se teve atualização
	código: git status
	2- adiciona a nova versão
	código : git add . 
	3- verificar se foi adicionado
	código : git status
	4-criar a nova versão
	código : git commit -m "descrever o que foi feito nessa nova versão"


7- verificar versões:
	código : git reflog

COMANDOS AVANÇADOS

8- Navegar entre as versões
	8.1 cometi um erro quero voltar na verção anterior, ciclo ANTES DE RODAR ESSE CODIGO PEGAR ALTORIZAÇÂO COM DEV SUPERIOR, RESPONSÁVEL:
		8.1.1 verificar verções :
			código : git reflog
		8.1.2 voltar na versão desejada/ ir até a versão desejada
			código : git reset --hard <código do commit que você quer voltar>

9- O que são Brach e como cria-las: São tipos 'pastas de arquivo' onde estão guardadas as atualizações,  em grandes équites normalmente tem uma Branch onde estão arquivos que funciona e pode ter outras onde tem arquivos em desenvolvimento
	9.1 ver quais branches estão disponíveis:
		Código: git branch
	9.2 Criar uma nova branch
		código : git pull na bach princial - puxar ultimas atualizações
		código : git branch <nome da branche> - nome normalmente usado em desenvolvimento de software em coisas que estão sendo testadas - staging
		
		exemplo: git branch stanging
	9.3 mudar de brach
		código : git checkout <nome da branch>
		sempre que der rodar uma nova brench (git push na nova branch) rodar o comando que o git informa para subir o arquivo
	9.4 trazer atualizações da branch de test para a branch estável
		9.4.1- Entrar na branch que vai receber as atualizações
			código : git checkout < nome da branch>
		9.4.2- verificar se está na branch correta
			código: git branch ( branch correta estará de cor diferente e indicada  com asterisco)
		9.4.3 -  Antes  de fazer o merge puxar as ultimas atualizações para ter certeza que está  fazendo atualizações na versão mais recente
			código : git pull -- traz as atualizações do servidor para a maquina local
		9.4.4 -  unir as atualizações com o código estável
			código : git merge <nome da branch que está a atualização para ser puxada para a estável)
		9.4.5 - enviar as atualizações para a nuvem
			Código : git push da branch principal
		
10- PULL REquest - aprovação de outro acima na cadeia - um merge democrático	

		solicitação feita dentro do  git hub em um botão da atualização, quando da atualizações na branch

11-  git ignore - não enviar alguns arquivos
		criar um artivo do tipo git onde será colocado o nome dos arquivos que é para ignorar
		código : touch .gitignore
		
o orquivo git ignore deve ser adicionado no controle de versão


resumo de comandos:

Etapa	Comando
Configurar nome e e-mail	git config --global user.name + user.email
Clonar projeto	git clone URL
Entrar no projeto	cd nome-da-pasta
Criar branch	git checkout -b nome-da-branch
Ver alterações	git status
Adicionar arquivos	git add .
Criar commit	git commit -m "mensagem"
Enviar pro GitLab	git push origin nome-da-branch


